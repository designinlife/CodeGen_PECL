<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "../../phpdoc/dtds/dbxml-4.1.2/docbookx.dtd" [
]>
	 
<book>

<!-- TODO: src=... is now available in a lot of places -->

 <title><literal>PECL_Gen</literal> - the PHP extension generator</title>
 <chapter>
  <title>Introduction</title>
  <section>
   <title>What is it?</title>
   <para>
    <literal>PECL_Gen</literal> is a tool that can automatically create
    the basic framework for a PHP extension from a rather simple XML
    specification file.
   </para>
   <para>
    It also supports the simpler (but less powerful) prototype file
    format as used by the shell script <literal>ext_skel</literal> that
    is distributed togehter with the PHP source code.
   </para>
   <para>
    <literal>PECL_Gen</literal>, unlike the older
    <literal>ext_skel</literal> solution, is a 100% PHP 5 bases
    solution and does not require any external tools like
    <literal>awk</literal> or <literal>sed</literal>. It only uses PHP
    functions that are always enabled in a default build so it should
    be usable on any platform that PHP itself runs on.
   </para>
   <para>
    The code generated by <literal>PECL_Gen</literal> is designed to work 
    with both the PHP 4 and PHP 5 extension APIs, PHP 5 is only required
    for the conversion of the XML spec file to C/C++ code. 
   </para>
  </section>
  
  <section>
   <title>Features</title>
   <para>
    <literal>pecl-gen</literal> tries to support as many extension
    writing aspects as possible. This currently includes code and documentation
    generation for:
    <simplelist>
     <member>functions</member>
     <member>constants</member>
     <member><literal>php.ini</literal> configuration directives</member>
     <member>resource types</member>
     <member>per-thread global variables</member>
    </simplelist>
   </para>
   <para>
    <literal>pecl-gen</literal> also generates
    <filename>config.m4</filename> 
    configuration files for Unix-like build environments,
    VisualStudio <filename>*.dsp</filename> project files for Windows
    and the <filename>package.xml</filename> files needed for
    PEAR/PECL packaging.
   </para>
   <para>
    DocBook XML documentation templates suitable for inclusion in the
    PHP or PEAR manual are generated in the hope that it will ease the
    task of documenting extension.
   </para>
   <para>
    Test script templates for automatic regression testing are already 
    created but due to some missing features within the "<literal>make
     test</literal>" infrastructure it is not possible to use the
    generated tests with standalone PECL extensions right now.
   </para>
  </section>
  
  <section>
   <title>How to use it</title>
   <para>
    There are currently three different modes of operation for
    <literal>pecl-gen</literal>. In its default mode it can create a complete
    ready-to-compile extension from an XML description (documented in
    the next chapter). In <literal>ext_skel</literal> compatibility
    mode it generates the extension from some command line parameters
    and an optional function prototype file and in immediate mode it
    just takes a function prototype from command line and writes a
    C code skeleton for just that function to standard output.
   </para>
   <para>
    <literal>ext_skel</literal> compatibility and immediate mode are 
    not documented here, please refer to the original 
    <literal>ext_skel</literal> documentation instead.
   </para>
   <para>
    Below you find a hardcopy of the <literal>pecl-gen
     --help</literal> output:
   </para>
   <screen>
<![CDATA[
pecl-gen 0.9.0rc5,Copyright (c) 2003-2005 Hartmut Holzgraefe
Usage:

pecl-gen [-h] [--force] [--experimental] [--version]
  [--extname=name] [--proto=file] [--skel=dir] [--stubs=file] 
  [--no-help] [--xml[=file]] [--full-xml] [--function=proto] [specfile.xml]

  -h|--help          this message
  -f|--force         overwrite existing directories
  -l|--linespecs     generate #line specs
  -x|--experimental  deprecated
  --function         create a function skeleton from a proto right away
  --version          show version info

  the following options are inherited from ext_skel:
  --extname=module   module is the name of your extension 
  --proto=file       file contains prototypes of functions to create
  --xml              generate xml documentation to be added to phpdoc-cvs

  these wait for functionality to be implemented and are ignored for now ...
  --stubs=file       generate only function stubs in file
  --no-help          don't try to be nice and create comments in the code
                     and helper functions to test if the module compiled

  these are accepted for backwards compatibility reasons but not used ...
  --full-xml         generate xml documentation for a self-contained extension
                     (this was also a no-op in ext_skel) 
  --skel=dir         path to the skeleton directory
                     (skeleton stuff is now self-contained)
]]>
   </screen>
  </section>
 </chapter>
  

 <chapter>
  <title>The XML description</title>
  
  <section>
   <title>Basics</title>
   <para>
    The top level container tag describing an extension is the
    <sgmltag>extension</sgmltag> tag. The name of the extension
    is given in the <literal>name</literal> attribute. The extension
    name has to be a valid C name as it is used as both the extensions
    directory name and the base name for several C symbols within the
    generated C code.
   </para>
   <para>
    The tags <sgmltag>summary</sgmltag> and
    <sgmltag>description</sgmltag> should be added at the very top of
    your extensions. The summary should be a short one-line
    description of the extension while the actually description can be
    as detailed as you like. Both are later used to generate the
    <literal>package.xml</literal> file and the documentation for your
    extension. The summary line is also put into the
    <literal>phpinfo()</literal> output of your extension.
   </para>
   <example>
    <title>Extension basics</title>
    <programlisting role="xml">
<![CDATA[
<extension name="sample">
 <summary>A sample PHP extension</summary>
 <description>
  This is a sample extension specification
  showing how to use PECL_Gen for
  extension generation.
 </description>
 ...
]]>
    </programlisting>
   </example>
  </section>

  <section>
   <title>Release information</title>
   <para>
    The release information for your extension should include the
    extension authors and maintainers, the version number, state and
    release date, the chosen license and maybe a change log describing
    previous releases. It is also possible to specify an image file
    to be used as a product logo with the <literal>phpinfo()</literal>
    output block for the extension.
   </para>
   <para>
    The <sgmltag>maintainers</sgmltag>, <sgmltag>release</sgmltag> and
    <sgmltag>changelog</sgmltag> tags specifications are identical to  
    those in  the PEAR <literal>package.xml</literal> specification so 
    please refer to the PEAR documentation here.
   </para>
   <example>
    <title>Release information</title>
    <programlisting>
<![CDATA[
...
  <maintainers>
    <maintainer>
      <user>hholzgra</user>
      <name>Hartmut Holzgraefe</name>
      <email>hartmut@php.net</email>
      <role>lead</role>
    </maintainer>
  </maintainers>

  <release>
    <version>1.0</version>
    <date>2002-07-09</date>
    <state>stable</state>
    <notes>
     The sample extension is now stable
    </notes>
  </release>

  <changelog>
    <release>
      <version>0.5</version>
      <date>2002-07-05</date>
      <state>beta</state>
      <notes>First beta version</notes>
    <release>
    <release>
      <version>0.1</version>
      <date>2002-07-01</date>
      <state>alpha</state>
      <notes>First alpha version</notes>
    <release>
  </changelog>
...
]]>
    </programlisting>
   </example>
   <para>
    The <sgmltag>license</sgmltag> tag is a little more restrictive as
    its <literal>package.xml</literal> counterpart as it is used to
    decide which license text should actually be written to the
    <literal>LICENSE</literal>. For now you have to specify either
    <literal>PHP</literal>, <literal>BSD</literal> or
    <literal>LGPL</literal>, any other value is taken as
    '<emphasis>unknown</emphasis>'.
   </para>
   <example>
    <title>License</title>
    <programlisting role="xml">
<![CDATA[
...
  <license>PHP</license>
...
]]>
    </programlisting>
   </example>
   <para>
    A logo to be used within the extensions
    <literal>phpinfo()</literal> block can be specified using the
    <sgmltag>logo</sgmltag> tag. The actual file name of the logo
    image has to be given in the <literal>scr=...</literal> attribute,
    Its MIME type defaults to <literal>image/gif</literal> unless a
    different type is specified using the
    <literal>mimetype=...</literal> attribute. Automatic MIME type
    detection is planned for a future release. 
   </para>
   <example>
    <title>A logo image</title>
    <programlisting role="xml">
<![CDATA[
...
  <logo src="sample_logo.gif" mimetype="image/gif" />
...
]]>
    </programlisting>
   </example>
  </section>
  
  <section>
   <title>Dependencies</title>
   <para>
    Dependencies are specified within the <sgmltag>deps</sgmltag>
    environment. Within the <sgmltag>deps</sgmltag> itself it is
    possible to set the programming language and target platforms using
    the <literal>language=...</literal> and
    <literal>platform=...</literal> attributes.
   </para>
   <para>
    Supported languages are C (<literal>lang="c"</literal>) and C++
    (<literal>language="cpp"</literal>). The language selection 
    does not influence code generation itself
    (<literal>pecl-gen</literal> always generates C code) but the way
    extensions are compiled and linked. C++ should only be selected to
    interface to external C++ libraries.
   </para>
   <para>
    Supported platforms are currently Unix-like systems
    (<literal>platform="unix"</literal>), Microsoft Windows
    (<literal>platform="win32"</literal>) or both (<literal>platform="all"</literal>).
   </para>
   <para> 
    <sgmltag>with</sgmltag>, <sgmltag>lib</sgmltag> and 
    <sgmltag>header</sgmltag> tags may be used within the 
    <sgmltag>deps</sgmltag> section to add configure switches 
    and library and header file dependencies.
   </para>
   <example>
    <title>Dependencies</title>
    <programlisting>
<![CDATA[
...
  <deps language="cpp" platform="win32">
  ...
  </deps>
...
]]>
    </programlisting>
   </example>

   <section>
    <title><literal>--with...</literal></title>
    <para>
     When building an extension on Unix-like systems or within the
     Cygwin environment under Windows the <literal>configure</literal>
     script will try to figure out where external libraries and header
     files needed by an extension are installed on the build system.
     Using a "with" option it is possible to specify where to actually
     look for libraries and headers. This way it is possible to
     override search paths if things are not installed in the default
     system paths or to specify the exact version of a package to be
     used if multiple versions are installed on the target system.
    </para>
    <para>
     The <sgmltag>with</sgmltag> tag takes three attributes:
     <literal>name=...</literal> for the actual name of the "with"
     option, <literal>testfile</literal> for the relative path of a
     file to check for while running the <literal>configure</literal>
     script and a list of default paths to check if no path is given
     as an argument to the "with" option in
     <literal>defaults</literal>. 
    </para>
    <para>
     Name and defaults are set to the extension base name and
     "/usr:/usr/local" if no values are given. The testfile attribute
     is mandatory.
    </para>
    <para>
     Textual data enclosed by the <sgmltag>with</sgmltag> is used to
     describe the "with" option in the output of <literal>configure
      --help</literal> calls.
    </para>
    <example>
      <title><literal>--with...</literal></title>
      <programlisting> 
<![CDATA[ 
... 
    <with defaults='/usr:/usr/local' testfile='include/sample.h'>sample install</with> 
... 
]]>
      </programlisting>
    </example>
   </section>

   <section>
    <title>Libraries</title>
    <para>
     Needed external libraries are specified using the
     <sgmltag>lib</sgmltag> tag. The <literal>name=...</literal>
     attribute is mandatory and takes the library base name. A library
     dependency by the name "sample" is actually referring to a library
     file named <filename>libsample.a</filename> for a static or  
     <filename>libsample.so</filename> for a dynamic library on
     Unix-like systems or to <filename>sample.DLL</filename> on
     Windows.
    </para>
    <para>
     It is possible to specify the name of a function symbol expected
     to be provided by the library using the
     <literal>function=...</literal> attribute. This function symbol
     is being looked for when <literal>configure</literal> is run for
     the extension. This way it is possible to verify that the right
     version of a library was found. With VisualStudio on windows it
     is not possible to perform this check, in this case the library
     is just added to the project file.
    </para>
    <example>
     <title>Library dependencies</title>
     <programlisting>
<![CDATA[
...
    <lib name="sample_u" platform="unix"  function="sample_v2" />
    <lib name="sample_w" platform="win32" />
    <lib name="sample"   platform="all" />
...
]]>
     </programlisting>
    </example>
   </section>

   <section>
    <title>Header files</title>
    <para>
     It is possible to specify header files needed by the extension
     using the <sgmltag>header</sgmltag>. Any headers specified have
     to exist in the include path set for compiling (see also the
     section on <literal>--with</literal>
     above). <literal>#include</literal> statements for the specified
     headers are the last ones to be put into the generated code
     unless you set the <literal>prepend="yes"</literal> attribute to
     have it put in front of the other <literal>#include</literal>s.
    </para>
    <para>
     By default header files are searched for in the <literal>include</literal>
     subdirectory of the path given in <sgmltag>with</sgmltag>. If a
     different relative path needs to be used it can be defined using
     the <literal>path</literal> attribute.
    </para>
<!-- TODO: is this still true?
    <note>
     <para>
      <literal>config.m4</literal>/<literal>configure</literal> checks
      for header file availability has not been added yet.
     </para>
    </note>
-->
    <example>
     <title>Header file dependencies</title>
     <programlisting>
<![CDATA[
...
    <header name="include_me_first.h" prepend="yes" />
    <header name="sample.h" />
    <header name="foobar.h" path="include/foo/bar" />    
...
]]>
     </programlisting>
    </example>
   </section>

<!-- TODO: will we ever support this? 
     would make sense for e.g. pkgtools?

   <section>
    <title>External programs</title>
    <para>
     Not supported yet.
    </para>
   </section>

   <section>
    <title>Other files</title>
    <para>
     Not supported yet.
    </para>
   </section>
-->

  </section>

  <section>
   <title>Custom code</title>
   <para>
    Custom code may be added to your extension source files using the
    <sgmltag>code</sgmltag> tags. The <literal>role=...</literal>
    and <literal>position=...</literal> tags specify the actual place
    in there generated source files where your code should be
    inserted.
   </para>
   <para>
    Possible roles are '<literal>code</literal>' (default) for the generated C
    or C++ code file and '<literal>header</literal>' header file.
    Possible positions are '<literal>top</literal>' and '<literal>bottom</literal>'
    (default) for insertion near the beginning or end of the generated file.
   </para>
  </section>

  <section>
   <title>Functions</title>
   <para>
    Three different kinds of functions may be defined using the
    <sgmltag>function</sgmltag> tag: public, internal and private
    functions.
    Public functions are functions you want to make available at the
    PHP code level, internal functions are C functions to be used by
    the PHP extension API and private functions are static C helper
    functions to be used within your extension.
   </para>
   <para>
    Public function names should by convention be prefixed with the
    extension name followed by an underscore, internal functions are
    one of <literal>MINIT</literal>, <literal>MSHUTDOWN</literal>,
    <literal>RINIT</literal>, <literal>RSHUTDOWN</literal> or
    <literal>MINFO</literal>, and private functions may have any legal
    C function name (unless you experience duplicate symbol errors
    while compiling or linking the extension).
   </para>

   <section>
    <title>Public functions</title>
    <para>
     The definition of a public PHP function requires the attributes 
     <literal>role="public"</literal> and
     <literal>name=...</literal> and at least the
     <sgmltag>proto</sgmltag> tag to be set.
    </para>
    <para>
     The function name may be any valid C name. To comply to PHP
     coding conventions a public function provided by an extension
     should always be prefixed by the extension name though.
    </para>
    <para>
     The function prototype specified using the
     <sgmltag>proto</sgmltag> tag is parsed to extract the return
     type, the function name and the argument list. The function name
     in the prototype has to match the name attribute given in the
     <sgmltag>function</sgmltag>.
    </para>
    <para>
     Valid types to be used for arguments and the return type are:
     <simplelist>
      <member><type>bool</type></member>
      <member><type>int</type></member>
      <member><type>float</type></member>
      <member><type>string</type></member>
      <member><type>array</type></member>
      <member><type>object</type></member>
      <member><type>mixed</type></member>
      <member><type>callback</type></member>
      <member><type>resource</type> <emphasis>[typename]</emphasis></member>
      <member><type>stream</type></member>
     </simplelist>
     Argument names in prototypes are not prepended by a <literal>$</literal> 
     sign by convention.
    </para>
    <para>
     Function documentation should be given using the
     <sgmltag>summary</sgmltag> tag for a one line description and the
     <sgmltag>description</sgmltag> tag for a more detailed
     description.
     Both are copied to the generated DocBook XML
     documentation for that function. Within <sgmltag>description</sgmltag>
     DocBook tags may be used. Be aware though that while <command>pecl-gen</command>
     accepts this validating XML parsers may complain when reading/validating
     an extension specification file.
    </para>
    <para>
     Skeleton code for parameter parsing and result passing is
     generated if  no <sgmltag>code</sgmltag> fragment is specified
     for a function. A <sgmltag>code</sgmltag> section is inserted
     right after the generated parameter parsing code. Setting a
     return value is up to the code fragment if any is given, adding a
     template doesn't make sense in this case.
    </para>

    <!-- TODO: this is a very big TODO!!!! -->
    <note>
     <para>
      Maybe some stuff regarding actual coding should be added here?
     </para>
    </note>
   </section>

   <section>
    <title>Internal functions</title>
    <para>
     The definition of an internal function requires just the
     <literal>role="internal"</literal> and <literal>name=...</literal>
     attributes. The name can only be one of the following:
     <variablelist>
      <varlistentry>
       <term><literal>MINIT</literal></term>
       <listitem>
        <simpara>
         The module initialization function. This is called
         once at startup of a PHP server module or standalone (CLI or
         CGI) binary.
        </simpara>
        <example>
         <title><literal>MINIT()</literal></title>
         <programlisting role="xml">
...
    &lt;function role="internal" name="MINIT">
      &lt;code>
&lt;![CDATA[
  int dummy = 42;
    
  dummy = dummy;
]]&gt;
      &lt;/code>
    &lt;/function>
...
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>MSHUTDOWN</literal></term>
       <listitem>
        <simpara>
         The module shutdown function. This is called once when the
         PHP server module or standalone binary is properly
         terminated.
         It may not be called on program crashes or other critical errors.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>RINIT</literal></term>
       <listitem>
        <simpara>
         The request shutdown function. This is called by PHP server
         modules before actually executing a PHP script request or once
         right after <literal>MINIT()</literal> for standalone
         binaries (CGI or CLI).
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>RSHUTDOWN</literal></term>
       <listitem>
        <simpara>
         The request shutdown function. This is called by PHP server
         modules after execution of PHP code has been finished or
         terminated.
         Is called even if critical PHP errors occurred but you can not
         rely on it being called on critical errors or crashes on the
         C level.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>MINFO</literal></term>
       <listitem>
        <simpara>
         The <literal>phpinfo()</literal> handler for this extension.
         It will be called whenever <literal>phpinfo()</literal> is
         invoked or when a standalone PHP binary is called with the
         <literal>-i</literal> command line option.
        </simpara>
        <simpara>
         The default code generated when no <sgmltag>code</sgmltag>
         section is given includes the extension name, summary line
         and release version and date, the optional logo image if
         specified, and the global and actual values of all
         <literal>php.ini</literal> directives specified.
        </simpara>
        <example>
         <title><literal>MINFO()</literal></title>
         <programlisting>
...
    &lt;function role='internal' name='MINFO'>
      &lt;code>
&lt;![CDATA[
  php_info_print_table_start();
  php_info_print_table_header(2, "test", "table");
  php_info_print_table_end();
]]&gt;
      &lt;/code>
    &lt;/function>
...
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <sgmltag>code</sgmltag> sections for the internal
     functions may be written as if they were C function bodies,
     including local variable definitions.
    </para>
    
   </section>

<!-- deprecated
   <section>
    <title>Private functions</title>
    <para>
     The definition of a private function requires just the
     <literal>role="private"</literal> and <literal>name=...</literal>
     attributes. The complete C code of the actual function has to be
     put into a <sgmltag>code</sgmltag>. Private functions should be
     declared <literal>static</literal> and their name should of
     course match the name attribute, but this is not checked for.
    </para>
   </section>
-->

  </section>

  <section>
   <title>Constants</title>
   <para>
    PHP constants are defined using <sgmltag>constant</sgmltag>
    tags within the <sgmltag>constants</sgmltag> environment.
   </para>
   <para>
    The actual constant name, type and value are specified using the
    <literal>name=...</literal>, <literal>type=...</literal> and
    <literal>value=...</literal> attributes. The constant name has to
    be a valid C name. PHP constant names should use uppercase letters
    only by convention. Possible types are "string", "int" and
    "float", the possible values depend on the type. For "int" and
    "float" you may use either numeric strings or the names of C
    constants (either true ANSI C/C++ constants or values
    <literal>#define</literal>d using the C preprocessor. "string"
    values are always used "as is", no constants may be used here.
   </para>
   <para>
    It is sufficient to specify a constant <literal>name</literal>
    only if a C integer constant should be available under the same
    name in PHP, too.
   </para>
   <para>
    A descriptive text may be given as content of the
    <sgmltag>constant</sgmltag> tag. This text will be used when
    generation the DocBook XML documentation.
   </para>
   <example>
    <title>PHP Constants</title>
    <programlisting role="xml">
<![CDATA[
...
 <constants>
  <constant name="SAMPLE_INT"   type="int"    value="42">
   A sample integer constant.
  </constant>
  <constant name="SAMPLE_FLOAT" type="float"  value="3.14">
   A sample floating point constant.
  </constant>
  <constant name="SAMPLE_FLOAT" type="float"  value="M_PI">
   A sample floating point constant using a #defined constant
  </constant>
  <constant name="SAMPLE_STRING" type="string" value="Hello World!">
   A sample string constant.
  </constant>
  <constant name="MY_CONST">
    A shortcat for #defined integer constants
  </constant>
 </constants>
...
]]>
    </programlisting>
   </example>
  </section>

  <section>
   <title><literal>php.ini</literal> parameters and internal variables</title>
   <para>
    An extension may define variables that are global to either the
    complete extension or to a specific request. True globals that are
    global to the complete extensions do not need any registration so
    they can be defined using C code within the global <sgmltag>code</sgmltag> 
    tag.
   </para>
   <para>
    Module globals that are only global to a single request need to
    be managed to ensure thread safety and initialization on request
    initialization. <literal>php.ini</literal> directive values are
    also stored as module globals but need some additional definitions.
   </para>
   <para>
    All global definitions have to be put into a
    <sgmltag>globals</sgmltag> environment. Simple module globals are
    defined using the <sgmltag>global</sgmltag>
    tag. <literal>php.ini</literal> directives are defined using the
    <sgmltag>phpini</sgmltag> tag.
   </para>
   <para>
    A <sgmltag>global</sgmltag> definition requires the
    <literal>name=...</literal> and <literal>type=...</literal>
    attributes to be set as valid C names and types. Which C types are
    allowed depends on what type definitions have been included from
    header files. The available types are not known when
    <literal>pecl-gen</literal> parses the XML specification so that
    types are only checked for valid name format here. Specifying a
    type that is not a basic C type or defined in any included file
    will lead to error messages when compiling the generated extension
    code later.
   </para>
   <para>
    Initial values may be specified using the
    <literal>value=...</literal> attribute. This feature should only
    be used for simple numeric values, anything more complex should
    better be initialized within the extensions
    <literal>RINIT()</literal> function. 
   </para>
   <para>
    <literal>php.ini</literal> directives may be defined using the
    <sgmltag>phpini</sgmltag> within a <sgmltag>globals</sgmltag>
    environment. To define a <literal>php.ini</literal> directive you
    have to specify its name, type and default value using the
    <literal>name=...</literal>, <literal>type=...</literal> and
    <literal>value=...</literal> attributes.
   </para>
   <para>
    Valid directive names are C variable names. The actual directive
    name is the extension name followed by a single dot
    '<literal>.</literal>' and the specified name. Valid directive
    types are <type>bool</type>, <type>int</type>, <type>float</type>
    and <type>string</type>.
   </para>
   <para>
    Directive default values are passed to the engine as strings, so
    you may not use any C constants or preprocessor macros here. The
    default value strings are parsed by the
    <literal>OnUpdate</literal> handler registered for that
    directive. No value checking takes place during extension code
    generation or compilation, this is done by the registered
    <literal>OnUpdate</literal> handler at runtime during request
    initialization. The <literal>OnUpdate</literal> handler defaults
    to the appropriate internal
    <literal>OnUpdate</literal><emphasis>type</emphasis> handler
    unless you specify a different handler using the
    <literal>onupdate=...</literal> attribute.
   </para>
   <para>
    The directive value may be changed at any time unless you specify
    an <literal>access=...</literal> attribute. Possible values are:
    <variablelist>
     <varlistentry>
      <term>system</term>
      <listitem>
       <para>
        may only be set globally in <literal>php.ini</literal> or the
        web server configuration
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>perdir</term>
      <listitem><para>
        may be changed in local <literal>.htaccess</literal> files
       </para></listitem>
     </varlistentry>
     <varlistentry>
      <term>user</term>
      <listitem><para>may be changed by PHP code</para></listitem>
     </varlistentry>
     <varlistentry>
      <term>all</term>
      <listitem><para>may be changed by anyone at any time</para></listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    The content data of <sgmltag>phpini</sgmltag> tags is used to
    generate documentation for the defined
    directive. <sgmltag>global</sgmltag> definitions may also include
    content data but it is for internal documentation only, it is not
    used in DocBook XML generation (yet).
   </para>
   <example>
    <title>Globals</title>
    <programlisting role="xml">
<![CDATA[
...
 <globals>
  <global name="sample_int"    type="int"    value="42" />
  <global name="sample_float"  type="float"  value="3.14" />
  <global name="SAMPLE_STRING" type="char *" />

  <phpini name="my_int" type="int" value="42" onupdate="OnUpdateLong" access="all">
   Definition for directive "sample.my_int"
  </phpini>
 </globals>
...
]]>
    </programlisting>
   </example>
   <para>
    Access to the modul globals and ini parameters is provided in a thread safe 
    manner through the EXTNAME_G() macro (replace EXTNAME with the upper cased
    name of your extension).
   </para>
   <example>
    <title>Globals</title>
    <programlisting role="xml">
<![CDATA[
<extension name="foobar">
 ...
 <globals>
  <global name="sample_int"    type="int"    value="42" />
 </globals>
 ...
 <function ...>
  ...
  <code>
   ...
   int foo = FOOBAR_G(sample_int); // get global value 
   ...
   FOOBAR_G(sample_init) = 42; // set global value
   ...
  </code>
 </function>
]]>
    </programlisting>
   </example>

  <!-- TODO: add an example how to write an OnUpdate handler? -->

  </section>
  
  <section>
   <title>Resources</title>
   <para>
    You may define PHP resource types within a
    <sgmltag>resources</sgmltag> environment. For each
    <sgmltag>resource</sgmltag> you have to specify the
    <literal>name=...</literal> and <literal>payload=...</literal>
    attributes. The <literal>name</literal> has to be a valid 
    C name and the <literal>payload</literal> has to be a valid 
    C type specifier. The payload type can only be checked for 
    the correctness of its form as the actual type definitions 
    from included header files are not known to the extension 
    generator when it generates the extension code.
   </para>
   <para>
    The actual resource data structure carries a pointer to the
    payload type. You may specify that PHP shall allocate and free
    the actual payload by setting the <literal>alloc=...</literal>
    attribute to "<literal>yes</literal>". If the payload is allocated
    by a library function or by yourself you should set 
    <literal>alloc=...</literal> to "<literal>no</literal>" 
    (the default value).
   </para>
   <para>
    Resources are destructed when the last variable reference refering
    to them is unset or at request shutdown. If your resource
    payload needs to be cleaned up as well you have to add an
    appropriate C code snippet that takes care of this using the
    <sgmltag>destruct</sgmltag> tag. Within the destructor snippet you
    may refer to the allocated payload using the
    <literal>resource</literal> pointer variable.
   </para>
   <para>
    You don't need to take care of destruction yourself if  your
    resource payload is allocated by PHP (<literal>alloc="yes"</literal>) 
    and needs no further cleanup work besides releasing the allocated memory.
   </para>
   <example>
    <title>Resources</title>
    <programlisting role="xml">
<![CDATA[
...
  <resources>
    <resource name="sample_resource" payload="float" alloc="yes">
      <description>
        A simple floating point resource
      </description>
      <!-- no <destruct> needed due to the alloc attribute -->
    </resource>

    <resource name="sample_struct" payload="struct foobar" alloc="no">
      <description>
        A foobar resource managed by an external foobar lib.
      </description>
      <destruct>
        foobar_release(resource);
      </destruct>
    </resource>
  </resources>
...
]]>
    </programlisting>
   </example>
   <section>
    <title>Resource creation and destruction</title>
    <para>
     The creation of resource instances is not defined within
     <sgmltag>resource</sgmltag>. This is a task to be handled by
     public PHP functions instead.
    </para>
    <example>
     <title>Resource creation</title>
     <screen>
<![CDATA[
  <function name="foo_open">
   <proto>resource foo foo_open(string path)</proto>
   <code>
    return_res = foo_open(path);

    if (!return_res) RETURN_FALSE;
   </code>
  </function>
]]>
     </screen>
    </example>
    <para>
     Resources are freed by simply removing them from the 
     resource list that they are in. The resources destructor
     function is automaticly called on list removal.
    </para>
    <example>
     <title>Resource destruction</title>
     <screen>
<![CDATA[
  <function name="foo_close">
   <proto>void foo_close(resource foo foores)</proto>
   <code>
     zend_list_delete(Z_LVAL_P(foores));
   </code>
  </function>
]]>
     </screen>
    </example>
   </section>
  </section>

  <section>
   <title>Classes</title>
   <para>
    OO support is planned for a future release but not implemented yet.
    OO code generation may be limited to PHP 5 extensions as unlike the
    rest of the extension API the OO implementation changed a lot between
    PHP 4 and 5.
   </para>
  </section>

  <section>
   <title>Streams</title>
   <para>
    Stream filter and wrapper support is experimental and not yet added
    to the released code base.
   </para>
  </section>
 
  <section>
   <title>config.m4 fragments</title>
   <para>
    Additional configure checks can be added to the generated config.m4
    file used by Unix/Cygwin builds using the <sgmltag>configm4</sgmltag> 
    tag. Using the 'position' attribute it is possible to specify whether
    the additional code is to be added at the top or bottom of the 
    config.m4 file.
   </para>
   <example>
    <title>config.m4 additions</title>
    <screen>
<![CDATA[
<configm4>
  AC_CHECK_PROG(RE2C, re2c, re2c)
  PHP_SUBST(RE2C)
</configm4>
]]>
    </screen>
   </example>
  </section>
    
  <section>
   <title>Makefile fragments</title>
   <para>
    Makefile rules may be added using the
    <sgmltag>makefile</sgmltag> for Unix/Cygwin builds.
    Using this it is possible to add dependencies or build rules in
    addition to the default and auto generated rules.
   </para>
   <example>
    <title>Makefile fragments</title>
    <screen>
<![CDATA[
<makefile>
$(builddir)/scanner.c: $(srcdir)/scanner.re
  $(RE2C) $(srcdir)/scanner.re > $@
</makefile>
]]>
    </screen>
   </example>
  </section>

  <section>
   <title>Tests</title>
   <para>
    Global test cases can be created using the <sgmltag>test</sgmltag> tag.
    Test cases for functions are automaticly created. 
   </para>
   <section>
    <title>Global test cases</title>
    <para>
     Global test case scripts can be created using the <sgmltag>test</sgmltag> tag.
     The <sgmltag>test</sgmltag> has a single attribute <literal>name</literal>. 
     As the test name is used as the test file basename <literal>name</literal>
     has to be unique and only characters, digits and <literal>'-'</literal> and
     <literal>'_'</literal> are allowed in test names. A more readable test
     title may be set using the <sgmltag>title</sgmltag> tag within 
     <sgmltag>test</sgmltag>.
    </para>
    <para>
     The actual PHP code to run is specified using a <sgmltag>code</sgmltag>
     section. The expected output is specified using a <sgmltag>result</sgmltag>
     tag, it defaults to <literal>OK</literal>. The PHP test suite supports three
     different ways to compare test output with the expected result: plain string
     comparison, comparison using printf style placeholders like %d for numbers
     and regular expresions (for details see the <filename>README.TESTING*</filename>
     files in the PHP source). By default the <literal>plain</literal> mode is used,
     the other two modes can be selected by setting the <literal>mode</literal>
     attribute of <sgmltag>result</sgmltag> to <literal>format</literal> or
     <literal>regex</literal>.
    </para>
    <para>
    </para>
   </section>
   <section>
    <title>Embedded function test cases</title>
    <para>
    </para>
   </section>
  </section>
 </chapter>

 <chapter>
  <title>XML input parsing</title>

  <section>
   <title>Includes</title>
   <para>
	The XML parser used by <literal>PECL_Gen</literal> supports inclusion
    of additional source files using three different ways:
    <itemizedlist>
     <listitem><simpara>external entities</simpara></listitem>
     <listitem><simpara>a subset of XInclude</simpara></listitem>
     <listitem><simpara>the <literal>source</literal> attribute of <sgmltag>code</sgmltag> tags</simpara></listitem>
    </itemizedlist>
   </para>
   <section>
    <title>External entities</title>
    <para>
     ...
    </para>
   </section>
   <section>
    <title>XInclude</title>
    <para>
     ...
    </para>
   </section>
   <section>
    <title><sgmltag>code</sgmltag> tags</title>
    <para>
     ...
    </para>
   </section>
  </section>

  <section>
   <title>Verbatim text data</title>
   <para>
    ...
   </para>
  </section>
 </chapter>
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
--> 

